// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: api/eason/eason.proto

package eason

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EasonNamingServiceClient is the client API for EasonNamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EasonNamingServiceClient interface {
	RegisterServer(ctx context.Context, in *RegisterServerReq, opts ...grpc.CallOption) (*RegisterServerResp, error)
	UnRegisterServer(ctx context.Context, in *UnRegisterServerReq, opts ...grpc.CallOption) (*UnRegisterServerResp, error)
	DiscoverServer(ctx context.Context, in *DiscoverServerReq, opts ...grpc.CallOption) (*DiscoverServerResp, error)
}

type easonNamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEasonNamingServiceClient(cc grpc.ClientConnInterface) EasonNamingServiceClient {
	return &easonNamingServiceClient{cc}
}

func (c *easonNamingServiceClient) RegisterServer(ctx context.Context, in *RegisterServerReq, opts ...grpc.CallOption) (*RegisterServerResp, error) {
	out := new(RegisterServerResp)
	err := c.cc.Invoke(ctx, "/grpc.naming_server.eason.EasonNamingService/RegisterServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easonNamingServiceClient) UnRegisterServer(ctx context.Context, in *UnRegisterServerReq, opts ...grpc.CallOption) (*UnRegisterServerResp, error) {
	out := new(UnRegisterServerResp)
	err := c.cc.Invoke(ctx, "/grpc.naming_server.eason.EasonNamingService/UnRegisterServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easonNamingServiceClient) DiscoverServer(ctx context.Context, in *DiscoverServerReq, opts ...grpc.CallOption) (*DiscoverServerResp, error) {
	out := new(DiscoverServerResp)
	err := c.cc.Invoke(ctx, "/grpc.naming_server.eason.EasonNamingService/DiscoverServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EasonNamingServiceServer is the server API for EasonNamingService service.
// All implementations must embed UnimplementedEasonNamingServiceServer
// for forward compatibility
type EasonNamingServiceServer interface {
	RegisterServer(context.Context, *RegisterServerReq) (*RegisterServerResp, error)
	UnRegisterServer(context.Context, *UnRegisterServerReq) (*UnRegisterServerResp, error)
	DiscoverServer(context.Context, *DiscoverServerReq) (*DiscoverServerResp, error)
	mustEmbedUnimplementedEasonNamingServiceServer()
}

// UnimplementedEasonNamingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEasonNamingServiceServer struct {
}

func (UnimplementedEasonNamingServiceServer) RegisterServer(context.Context, *RegisterServerReq) (*RegisterServerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterServer not implemented")
}
func (UnimplementedEasonNamingServiceServer) UnRegisterServer(context.Context, *UnRegisterServerReq) (*UnRegisterServerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnRegisterServer not implemented")
}
func (UnimplementedEasonNamingServiceServer) DiscoverServer(context.Context, *DiscoverServerReq) (*DiscoverServerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverServer not implemented")
}
func (UnimplementedEasonNamingServiceServer) mustEmbedUnimplementedEasonNamingServiceServer() {}

// UnsafeEasonNamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EasonNamingServiceServer will
// result in compilation errors.
type UnsafeEasonNamingServiceServer interface {
	mustEmbedUnimplementedEasonNamingServiceServer()
}

func RegisterEasonNamingServiceServer(s grpc.ServiceRegistrar, srv EasonNamingServiceServer) {
	s.RegisterService(&EasonNamingService_ServiceDesc, srv)
}

func _EasonNamingService_RegisterServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasonNamingServiceServer).RegisterServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.naming_server.eason.EasonNamingService/RegisterServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasonNamingServiceServer).RegisterServer(ctx, req.(*RegisterServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasonNamingService_UnRegisterServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasonNamingServiceServer).UnRegisterServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.naming_server.eason.EasonNamingService/UnRegisterServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasonNamingServiceServer).UnRegisterServer(ctx, req.(*UnRegisterServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasonNamingService_DiscoverServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasonNamingServiceServer).DiscoverServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.naming_server.eason.EasonNamingService/DiscoverServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasonNamingServiceServer).DiscoverServer(ctx, req.(*DiscoverServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EasonNamingService_ServiceDesc is the grpc.ServiceDesc for EasonNamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EasonNamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.naming_server.eason.EasonNamingService",
	HandlerType: (*EasonNamingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterServer",
			Handler:    _EasonNamingService_RegisterServer_Handler,
		},
		{
			MethodName: "UnRegisterServer",
			Handler:    _EasonNamingService_UnRegisterServer_Handler,
		},
		{
			MethodName: "DiscoverServer",
			Handler:    _EasonNamingService_DiscoverServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/eason/eason.proto",
}
